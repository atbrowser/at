# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := swift_addon
### Rules for action "build_swift":
quiet_cmd_binding_gyp_swift_addon_target_build_swift = ACTION binding_gyp_swift_addon_target_build_swift $@
cmd_binding_gyp_swift_addon_target_build_swift = LD_LIBRARY_PATH=$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; export LD_LIBRARY_PATH; cd $(srcdir)/.; mkdir -p build_swift; swiftc src/SwiftCode.swift -emit-objc-header-path ./build_swift/swift_addon-Swift.h -emit-library -o ./build_swift/libSwiftCode.a -emit-module -module-name swift_addon -module-link-name SwiftCode

build_swift/libSwiftCode.a: obj := $(abs_obj)
build_swift/libSwiftCode.a: builddir := $(abs_builddir)
build_swift/libSwiftCode.a: export BUILT_FRAMEWORKS_DIR := ${abs_builddir}
build_swift/libSwiftCode.a: export BUILT_PRODUCTS_DIR := ${abs_builddir}
build_swift/libSwiftCode.a: export CONFIGURATION := ${BUILDTYPE}
build_swift/libSwiftCode.a: export DYLIB_INSTALL_NAME_BASE := @rpath
build_swift/libSwiftCode.a: export EXECUTABLE_NAME := swift_addon.node
build_swift/libSwiftCode.a: export EXECUTABLE_PATH := swift_addon.node
build_swift/libSwiftCode.a: export FULL_PRODUCT_NAME := swift_addon.node
build_swift/libSwiftCode.a: export LD_DYLIB_INSTALL_NAME := @rpath/swift_addon.node
build_swift/libSwiftCode.a: export MACH_O_TYPE := mh_bundle
build_swift/libSwiftCode.a: export PRODUCT_NAME := swift_addon
build_swift/libSwiftCode.a: export PRODUCT_TYPE := com.apple.product-type.library.dynamic
build_swift/libSwiftCode.a: export SDKROOT := /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk
build_swift/libSwiftCode.a: export SRCROOT := ${abs_srcdir}/
build_swift/libSwiftCode.a: export SOURCE_ROOT := ${SRCROOT}
build_swift/libSwiftCode.a: export TARGET_BUILD_DIR := ${abs_builddir}
build_swift/libSwiftCode.a: export TEMP_DIR := ${TMPDIR}
build_swift/libSwiftCode.a: export XCODE_VERSION_ACTUAL := 2600
build_swift/libSwiftCode.a: TOOLSET := $(TOOLSET)
build_swift/libSwiftCode.a build_swift/swift_addon-Swift.h: 1e924c8b7d98b15691851f47d16418589d7caa3a.intermediate
	@:
.INTERMEDIATE: 1e924c8b7d98b15691851f47d16418589d7caa3a.intermediate
1e924c8b7d98b15691851f47d16418589d7caa3a.intermediate: $(srcdir)/src/SwiftCode.swift FORCE_DO_CMD
	$(call do_cmd,touch)
	$(call do_cmd,binding_gyp_swift_addon_target_build_swift)

all_deps += build_swift/libSwiftCode.a build_swift/swift_addon-Swift.h
action_binding_gyp_swift_addon_target_build_swift_outputs := build_swift/libSwiftCode.a build_swift/swift_addon-Swift.h

### Rules for action "copy_swift_lib":
quiet_cmd_binding_gyp_swift_addon_target_copy_swift_lib = ACTION binding_gyp_swift_addon_target_copy_swift_lib $@
cmd_binding_gyp_swift_addon_target_copy_swift_lib = LD_LIBRARY_PATH=$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; export LD_LIBRARY_PATH; cd $(srcdir)/.; mkdir -p $(builddir); sh -c "cp -f /Users/yusufberkcekic/Documents/yebec/at/swift/build_swift/libSwiftCode.a $(builddir)/libSwiftCode.a && install_name_tool -id @rpath/libSwiftCode.a $(builddir)/libSwiftCode.a"

$(builddir)/libSwiftCode.a: obj := $(abs_obj)
$(builddir)/libSwiftCode.a: builddir := $(abs_builddir)
$(builddir)/libSwiftCode.a: export BUILT_FRAMEWORKS_DIR := ${abs_builddir}
$(builddir)/libSwiftCode.a: export BUILT_PRODUCTS_DIR := ${abs_builddir}
$(builddir)/libSwiftCode.a: export CONFIGURATION := ${BUILDTYPE}
$(builddir)/libSwiftCode.a: export DYLIB_INSTALL_NAME_BASE := @rpath
$(builddir)/libSwiftCode.a: export EXECUTABLE_NAME := swift_addon.node
$(builddir)/libSwiftCode.a: export EXECUTABLE_PATH := swift_addon.node
$(builddir)/libSwiftCode.a: export FULL_PRODUCT_NAME := swift_addon.node
$(builddir)/libSwiftCode.a: export LD_DYLIB_INSTALL_NAME := @rpath/swift_addon.node
$(builddir)/libSwiftCode.a: export MACH_O_TYPE := mh_bundle
$(builddir)/libSwiftCode.a: export PRODUCT_NAME := swift_addon
$(builddir)/libSwiftCode.a: export PRODUCT_TYPE := com.apple.product-type.library.dynamic
$(builddir)/libSwiftCode.a: export SDKROOT := /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk
$(builddir)/libSwiftCode.a: export SRCROOT := ${abs_srcdir}/
$(builddir)/libSwiftCode.a: export SOURCE_ROOT := ${SRCROOT}
$(builddir)/libSwiftCode.a: export TARGET_BUILD_DIR := ${abs_builddir}
$(builddir)/libSwiftCode.a: export TEMP_DIR := ${TMPDIR}
$(builddir)/libSwiftCode.a: export XCODE_VERSION_ACTUAL := 2600
$(builddir)/libSwiftCode.a: TOOLSET := $(TOOLSET)
$(builddir)/libSwiftCode.a: /Users/yusufberkcekic/Documents/yebec/at/swift/build_swift/libSwiftCode.a FORCE_DO_CMD
	$(call do_cmd,binding_gyp_swift_addon_target_copy_swift_lib)

all_deps += $(builddir)/libSwiftCode.a
action_binding_gyp_swift_addon_target_copy_swift_lib_outputs := $(builddir)/libSwiftCode.a


DEFS_Debug := \
	'-DNODE_GYP_MODULE_NAME=swift_addon' \
	'-DUSING_UV_SHARED=1' \
	'-DUSING_V8_SHARED=1' \
	'-DV8_DEPRECATION_WARNINGS=1' \
	'-D_GLIBCXX_USE_CXX11_ABI=1' \
	'-D_DARWIN_USE_64_BIT_INODE=1' \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DBUILDING_NODE_EXTENSION' \
	'-DDEBUG' \
	'-D_DEBUG'

# Flags passed to all source files.
CFLAGS_Debug := \
	-O0 \
	-gdwarf-2 \
	-fno-strict-aliasing \
	-mmacosx-version-min=11.0 \
	-arch \
	arm64 \
	-Wall \
	-Wendif-labels \
	-W \
	-Wno-unused-parameter

# Flags passed to only C files.
CFLAGS_C_Debug := \
	-ObjC++ \
	-fobjc-arc

# Flags passed to only C++ files.
CFLAGS_CC_Debug := \
	-std=gnu++20 \
	-stdlib=libc++ \
	-fno-rtti \
	-ObjC++ \
	-fobjc-arc

# Flags passed to only ObjC files.
CFLAGS_OBJC_Debug := \
	-fobjc-arc

# Flags passed to only ObjC++ files.
CFLAGS_OBJCC_Debug := \
	-fobjc-arc

INCS_Debug := \
	-I/Users/yusufberkcekic/Library/Caches/node-gyp/23.6.1/include/node \
	-I/Users/yusufberkcekic/Library/Caches/node-gyp/23.6.1/src \
	-I/Users/yusufberkcekic/Library/Caches/node-gyp/23.6.1/deps/openssl/config \
	-I/Users/yusufberkcekic/Library/Caches/node-gyp/23.6.1/deps/openssl/openssl/include \
	-I/Users/yusufberkcekic/Library/Caches/node-gyp/23.6.1/deps/uv/include \
	-I/Users/yusufberkcekic/Library/Caches/node-gyp/23.6.1/deps/zlib \
	-I/Users/yusufberkcekic/Library/Caches/node-gyp/23.6.1/deps/v8/include \
	-I/Users/yusufberkcekic/Documents/yebec/at/swift/node_modules/node-addon-api \
	-I$(srcdir)/include \
	-I$(srcdir)/build_swift

DEFS_Release := \
	'-DNODE_GYP_MODULE_NAME=swift_addon' \
	'-DUSING_UV_SHARED=1' \
	'-DUSING_V8_SHARED=1' \
	'-DV8_DEPRECATION_WARNINGS=1' \
	'-D_GLIBCXX_USE_CXX11_ABI=1' \
	'-D_DARWIN_USE_64_BIT_INODE=1' \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DBUILDING_NODE_EXTENSION'

# Flags passed to all source files.
CFLAGS_Release := \
	-O3 \
	-gdwarf-2 \
	-fno-strict-aliasing \
	-flto \
	-mmacosx-version-min=11.0 \
	-arch \
	arm64 \
	-Wall \
	-Wendif-labels \
	-W \
	-Wno-unused-parameter

# Flags passed to only C files.
CFLAGS_C_Release := \
	-ObjC++ \
	-fobjc-arc

# Flags passed to only C++ files.
CFLAGS_CC_Release := \
	-std=gnu++20 \
	-stdlib=libc++ \
	-fno-rtti \
	-ObjC++ \
	-fobjc-arc

# Flags passed to only ObjC files.
CFLAGS_OBJC_Release := \
	-fobjc-arc

# Flags passed to only ObjC++ files.
CFLAGS_OBJCC_Release := \
	-fobjc-arc

INCS_Release := \
	-I/Users/yusufberkcekic/Library/Caches/node-gyp/23.6.1/include/node \
	-I/Users/yusufberkcekic/Library/Caches/node-gyp/23.6.1/src \
	-I/Users/yusufberkcekic/Library/Caches/node-gyp/23.6.1/deps/openssl/config \
	-I/Users/yusufberkcekic/Library/Caches/node-gyp/23.6.1/deps/openssl/openssl/include \
	-I/Users/yusufberkcekic/Library/Caches/node-gyp/23.6.1/deps/uv/include \
	-I/Users/yusufberkcekic/Library/Caches/node-gyp/23.6.1/deps/zlib \
	-I/Users/yusufberkcekic/Library/Caches/node-gyp/23.6.1/deps/v8/include \
	-I/Users/yusufberkcekic/Documents/yebec/at/swift/node_modules/node-addon-api \
	-I$(srcdir)/include \
	-I$(srcdir)/build_swift

OBJS := \
	$(obj).target/$(TARGET)/src/swift_addon.o \
	$(obj).target/$(TARGET)/src/SwiftBridge.o

# Add to the list of files we specially track dependencies for.
all_deps += $(OBJS)

# Make sure our dependencies are built before any of us.
$(OBJS): | $(builddir)/nothing.a

# Make sure our actions/rules run before any of us.
$(OBJS): | $(action_binding_gyp_swift_addon_target_build_swift_outputs) $(action_binding_gyp_swift_addon_target_copy_swift_lib_outputs)

# CFLAGS et al overrides must be target-local.
# See "Target-specific Variable Values" in the GNU Make manual.
$(OBJS): TOOLSET := $(TOOLSET)
$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))
$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))
$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))
$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))

# Suffix rules, putting all outputs into $(obj).

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.m FORCE_DO_CMD
	@$(call do_cmd,objc,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.mm FORCE_DO_CMD
	@$(call do_cmd,objcxx,1)

# Try building from generated source, too.

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.m FORCE_DO_CMD
	@$(call do_cmd,objc,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.mm FORCE_DO_CMD
	@$(call do_cmd,objcxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.m FORCE_DO_CMD
	@$(call do_cmd,objc,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.mm FORCE_DO_CMD
	@$(call do_cmd,objcxx,1)

# End of this set of suffix rules
### Rules for final target.
# Build our special outputs first.
$(builddir)/swift_addon.node: | $(action_binding_gyp_swift_addon_target_build_swift_outputs) $(action_binding_gyp_swift_addon_target_copy_swift_lib_outputs)

# Preserve order dependency of special output on deps.
$(action_binding_gyp_swift_addon_target_build_swift_outputs) $(action_binding_gyp_swift_addon_target_copy_swift_lib_outputs): | $(builddir)/nothing.a

LDFLAGS_Debug := \
	-Wl,-rpath,@loader_path \
	-Wl,-install_name,@rpath/libSwiftCode.a \
	-undefined dynamic_lookup \
	-Wl,-search_paths_first \
	-mmacosx-version-min=11.0 \
	-arch \
	arm64 \
	-L$(builddir) \
	-stdlib=libc++

LIBTOOLFLAGS_Debug := \
	-Wl,-rpath,@loader_path \
	-Wl,-install_name,@rpath/libSwiftCode.a \
	-undefined dynamic_lookup \
	-Wl,-search_paths_first

LDFLAGS_Release := \
	-Wl,-rpath,@loader_path \
	-Wl,-install_name,@rpath/libSwiftCode.a \
	-undefined dynamic_lookup \
	-Wl,-search_paths_first \
	-mmacosx-version-min=11.0 \
	-arch \
	arm64 \
	-L$(builddir) \
	-stdlib=libc++

LIBTOOLFLAGS_Release := \
	-Wl,-rpath,@loader_path \
	-Wl,-install_name,@rpath/libSwiftCode.a \
	-undefined dynamic_lookup \
	-Wl,-search_paths_first

LIBS := \
	$(builddir)/libSwiftCode.a

$(builddir)/swift_addon.node: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(builddir)/swift_addon.node: LIBS := $(LIBS)
$(builddir)/swift_addon.node: GYP_LIBTOOLFLAGS := $(LIBTOOLFLAGS_$(BUILDTYPE))
$(builddir)/swift_addon.node: TOOLSET := $(TOOLSET)
$(builddir)/swift_addon.node: $(OBJS) $(builddir)/nothing.a FORCE_DO_CMD
	$(call do_cmd,solink_module)

all_deps += $(builddir)/swift_addon.node
# Add target alias
.PHONY: swift_addon
swift_addon: $(builddir)/swift_addon.node

# Short alias for building this executable.
.PHONY: swift_addon.node
swift_addon.node: $(builddir)/swift_addon.node

# Add executable to "all" target.
.PHONY: all
all: $(builddir)/swift_addon.node

